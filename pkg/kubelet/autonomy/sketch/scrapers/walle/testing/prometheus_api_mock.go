// Automatically generated by MockGen. DO NOT EDIT!
// Source: $GOPATH/src/k8s.io/kubernetes/vendor/github.com/prometheus/client_golang/api/prometheus/v1/api.go

package testing

import (
	context "context"
	time "time"

	gomock "github.com/golang/mock/gomock"
	. "github.com/prometheus/client_golang/api/prometheus/v1"
	model "github.com/prometheus/common/model"
)

// Mock of API interface
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *_MockAPIRecorder
}

// Recorder for MockAPI (not exported)
type _MockAPIRecorder struct {
	mock *MockAPI
}

func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &_MockAPIRecorder{mock}
	return mock
}

func (_m *MockAPI) EXPECT() *_MockAPIRecorder {
	return _m.recorder
}

func (_m *MockAPI) AlertManagers(ctx context.Context) (AlertManagersResult, error) {
	ret := _m.ctrl.Call(_m, "AlertManagers", ctx)
	ret0, _ := ret[0].(AlertManagersResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIRecorder) AlertManagers(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "AlertManagers", arg0)
}

func (_m *MockAPI) CleanTombstones(ctx context.Context) error {
	ret := _m.ctrl.Call(_m, "CleanTombstones", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAPIRecorder) CleanTombstones(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "CleanTombstones", arg0)
}

func (_m *MockAPI) Config(ctx context.Context) (ConfigResult, error) {
	ret := _m.ctrl.Call(_m, "Config", ctx)
	ret0, _ := ret[0].(ConfigResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIRecorder) Config(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Config", arg0)
}

func (_m *MockAPI) DeleteSeries(ctx context.Context, matches []string, startTime time.Time, endTime time.Time) error {
	ret := _m.ctrl.Call(_m, "DeleteSeries", ctx, matches, startTime, endTime)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockAPIRecorder) DeleteSeries(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "DeleteSeries", arg0, arg1, arg2, arg3)
}

func (_m *MockAPI) Flags(ctx context.Context) (FlagsResult, error) {
	ret := _m.ctrl.Call(_m, "Flags", ctx)
	ret0, _ := ret[0].(FlagsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIRecorder) Flags(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Flags", arg0)
}

func (_m *MockAPI) LabelValues(ctx context.Context, label string) (model.LabelValues, error) {
	ret := _m.ctrl.Call(_m, "LabelValues", ctx, label)
	ret0, _ := ret[0].(model.LabelValues)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIRecorder) LabelValues(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LabelValues", arg0, arg1)
}

func (_m *MockAPI) Query(ctx context.Context, query string, ts time.Time) (model.Value, error) {
	ret := _m.ctrl.Call(_m, "Query", ctx, query, ts)
	ret0, _ := ret[0].(model.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIRecorder) Query(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Query", arg0, arg1, arg2)
}

func (_m *MockAPI) QueryRange(ctx context.Context, query string, r Range) (model.Value, error) {
	ret := _m.ctrl.Call(_m, "QueryRange", ctx, query, r)
	ret0, _ := ret[0].(model.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIRecorder) QueryRange(arg0, arg1, arg2 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "QueryRange", arg0, arg1, arg2)
}

func (_m *MockAPI) Series(ctx context.Context, matches []string, startTime time.Time, endTime time.Time) ([]model.LabelSet, error) {
	ret := _m.ctrl.Call(_m, "Series", ctx, matches, startTime, endTime)
	ret0, _ := ret[0].([]model.LabelSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIRecorder) Series(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Series", arg0, arg1, arg2, arg3)
}

func (_m *MockAPI) Snapshot(ctx context.Context, skipHead bool) (SnapshotResult, error) {
	ret := _m.ctrl.Call(_m, "Snapshot", ctx, skipHead)
	ret0, _ := ret[0].(SnapshotResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIRecorder) Snapshot(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Snapshot", arg0, arg1)
}

func (_m *MockAPI) Targets(ctx context.Context) (TargetsResult, error) {
	ret := _m.ctrl.Call(_m, "Targets", ctx)
	ret0, _ := ret[0].(TargetsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockAPIRecorder) Targets(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Targets", arg0)
}
