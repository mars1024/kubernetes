// Code generated by mockery v1.0.0. DO NOT EDIT.

package testing

import mock "github.com/stretchr/testify/mock"

import types "k8s.io/apimachinery/pkg/types"
import v1alpha1 "k8s.io/kubernetes/pkg/kubelet/autonomy/sketch/api/v1alpha1"

// Snapshoter is an autogenerated mock type for the Snapshoter type
type Snapshoter struct {
	mock.Mock
}

// GetContainerSketch provides a mock function with given fields: namepsace, podName, podUID, containerName
func (_m *Snapshoter) GetContainerSketchByName(namepsace string, podName string, podUID types.UID, containerName string) (*v1alpha1.ContainerSketch, error) {
	ret := _m.Called(namepsace, podName, podUID, containerName)

	var r0 *v1alpha1.ContainerSketch
	if rf, ok := ret.Get(0).(func(string, string, types.UID, string) *v1alpha1.ContainerSketch); ok {
		r0 = rf(namepsace, podName, podUID, containerName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ContainerSketch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, types.UID, string) error); ok {
		r1 = rf(namepsace, podName, podUID, containerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContainerSketchByID provides a mock function with given fields: namespace, podName, podUID, containerID
func (_m *Snapshoter) GetContainerSketchByID(namespace string, podName string, podUID types.UID, containerID string) (*v1alpha1.ContainerSketch, error) {
	ret := _m.Called(namespace, podName, podUID, containerID)

	var r0 *v1alpha1.ContainerSketch
	if rf, ok := ret.Get(0).(func(string, string, types.UID, string) *v1alpha1.ContainerSketch); ok {
		r0 = rf(namespace, podName, podUID, containerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.ContainerSketch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, types.UID, string) error); ok {
		r1 = rf(namespace, podName, podUID, containerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeSketch provides a mock function with given fields:
func (_m *Snapshoter) GetNodeSketch() (*v1alpha1.NodeSketch, error) {
	ret := _m.Called()

	var r0 *v1alpha1.NodeSketch
	if rf, ok := ret.Get(0).(func() *v1alpha1.NodeSketch); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.NodeSketch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPodSketch provides a mock function with given fields: namespace, name, uid
func (_m *Snapshoter) GetPodSketch(namespace string, name string, uid types.UID) (*v1alpha1.PodSketch, error) {
	ret := _m.Called(namespace, name, uid)

	var r0 *v1alpha1.PodSketch
	if rf, ok := ret.Get(0).(func(string, string, types.UID) *v1alpha1.PodSketch); ok {
		r0 = rf(namespace, name, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.PodSketch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, types.UID) error); ok {
		r1 = rf(namespace, name, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSummary provides a mock function with given fields:
func (_m *Snapshoter) GetSummary() (*v1alpha1.SketchSummary, error) {
	ret := _m.Called()

	var r0 *v1alpha1.SketchSummary
	if rf, ok := ret.Get(0).(func() *v1alpha1.SketchSummary); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1alpha1.SketchSummary)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
