#!/bin/bash

# Copyright 2015 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

usage() {
	err "Invalid usage. Usage: "
	err "\t$0 init"
	err "\t$0 mount <mount dir> <json params>"
	err "\t$0 unmount <mount dir>"
	exit 1
}

err() {
	echo -ne $* 1>&2
}

log() {
	echo -ne $* >&1
}

# Judge whether a dir is empty
is_empty_dir(){ 
    return `ls -A $1|wc -w`
}

PYTHONSCRIPT="import sys;import json;temp = json.loads(sys.argv[1]);print(temp[sys.argv[2]])"

domount() {
	MNTPATH=$1
	if [ ! -d $MNTPATH ] ; then
		mkdir -p $MNTPATH &> /dev/null
	fi

	# Copy initial files from image if MNTPATH is empty.
	if is_empty_dir $MNTPATH ; then
		# Get IMAGE and IMAGEPATH from json
		IMAGE=`echo $PYTHONSCRIPT | python - $2 "image"`
		IMAGEPATH=`echo $PYTHONSCRIPT | python - $2 "imagePath"`

		RUNTIME="Docker"
		if command "pouch" &> /dev/null; then
			RUNTIME="Pouch"
		fi

		if [ "$RUNTIME" = "Docker" ]; then
			# Make sure image exists
			docker pull $IMAGE &> /dev/null
			CTHOME=`docker inspect -f "{{.GraphDriver.Data.RootDir}}" $IMAGE 2> /dev/null`
			if [[ $CTHOME != *overlay*/root ]]; then
				err "{ \"status\": \"Failure\", \"message\": \"Failed to get root dir from image $IMAGE\"}"
				exit 1
			fi
			if [ -d $CTHOME$IMAGEPATH ]; then
				cp -rp $CTHOME$IMAGEPATH $MNTPATH
			fi
		else
			err "{ \"status\": \"Failure\", \"message\": \"Pouch doesn't support copy content from image\"}"
			exit 1
		fi
	fi

	log '{"status": "Success"}'
	exit 0
}

unmount() {
	MNTPATH=$1
	# Check MNTPATH is legal because "rm -rf" is dangerous.
	if [[ $MNTPATH != */pods/* ]] ; then
		err "{ \"status\": \"Failure\", \"message\": \"Failed to delete path ${MNTPATH}\"}"
		exit 1
	fi

	# We need to remove the content in the MNTPATH, so kubelet can delete the pod successfully.
	rm -rf $MNTPATH/* &> /dev/null
	rm -rf $MNTPATH/.* &> /dev/null

	log '{"status": "Success"}'
	exit 0
}

op=$1

if [ "$op" = "init" ]; then
	log '{"status": "Success", "capabilities": {"attach": false}}'
	exit 0
fi

if [ $# -lt 2 ]; then
	usage
fi

shift

case "$op" in
	mount)
		domount $*
		;;
	unmount)
		unmount $*
		;;
	*)
		log '{"status": "Not supported"}'
		exit 0
esac

exit 1
