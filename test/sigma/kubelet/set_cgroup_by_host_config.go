package kubelet

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	sigmak8sapi "gitlab.alibaba-inc.com/sigma/sigma-k8s-api/pkg/api"
	"k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/kubernetes/test/e2e/framework"
	"k8s.io/kubernetes/test/sigma/util"
)

type setCgroupTestCase struct {
	description          string
	pod                  *v1.Pod
	cgroupParent         string
	cpuShares            int64
	cpuPeriod            int64
	cpuQuota             int64
	cpuBvtWarpNS         int
	oomScore             int64
	expectedCgroupParent string
	expectedCPUShares    string
	expectedCPUPeriod    string
	expectedCPUQuota     string
	expectedCPUBvtWarpNS string
	expectedOOMScore     string
}

func doSetCgroupTestCase(f *framework.Framework, testCase *setCgroupTestCase) {
	framework.Logf("Start to test case %q", testCase.description)
	pod := generateRunningPod()
	containerName := pod.Spec.Containers[0].Name

	// Set alloc spec annotation
	hostConfig := sigmak8sapi.HostConfigInfo{
		CgroupParent: testCase.cgroupParent,
		CpuShares:    testCase.cpuShares,
		CPUBvtWarpNs: testCase.cpuBvtWarpNS,
		CpuQuota:     testCase.cpuQuota,
		CpuPeriod:    testCase.cpuPeriod,
		OomScoreAdj:  testCase.oomScore,
	}

	allocSpec := &sigmak8sapi.AllocSpec{
		Containers: []sigmak8sapi.Container{
			sigmak8sapi.Container{
				Name:       containerName,
				HostConfig: hostConfig,
			},
		},
	}

	allocSpecBytes, err := json.Marshal(allocSpec)
	Expect(err).NotTo(HaveOccurred(), "failed to marshal allocSpec")
	pod.Annotations[sigmak8sapi.AnnotationPodAllocSpec] = string(allocSpecBytes)

	// Step 1: Create pod
	testPod, err := f.ClientSet.CoreV1().Pods(f.Namespace.Name).Create(pod)
	Expect(err).NotTo(HaveOccurred(), "failed to created pod")

	defer util.DeletePod(f.ClientSet, testPod)

	// Step 2: Wait for container's creation finished.
	By("wait until pod running and have pod/host IP")
	err = util.WaitTimeoutForPodStatus(f.ClientSet, testPod, v1.PodRunning, 3*time.Minute)
	Expect(err).NotTo(HaveOccurred(), "pod status is not running")

	// Step 3: Get the running pod.
	By("get running pod")
	getPod, err := f.ClientSet.CoreV1().Pods(f.Namespace.Name).Get(testPod.Name, metav1.GetOptions{})
	framework.Logf("get pod annotations: %v", getPod.Annotations)
	Expect(err).NotTo(HaveOccurred(), "failed to running pod")

	// Step 4: Get CPUShares
	command := "cat /sys/fs/cgroup/cpuset,cpu,cpuacct/cpu.shares"
	cpuSharesStr := f.ExecShellInContainer(pod.Name, containerName, command)
	cpuShares := strings.Replace(cpuSharesStr, "\n", "", -1)
	framework.Logf("get pod cpuShares: %s", cpuShares)
	Expect(cpuShares).To(Equal(testCase.expectedCPUShares), "bad cpu shares")

	// Step 5: Get CPUQuota
	command = "cat /sys/fs/cgroup/cpuset,cpu,cpuacct/cpu.cfs_quota_us"
	cpuQuotaStr := f.ExecShellInContainer(pod.Name, containerName, command)
	cpuQuota := strings.Replace(cpuQuotaStr, "\n", "", -1)
	framework.Logf("get pod cpuQuota: %s", cpuQuota)
	Expect(cpuQuota).To(Equal(testCase.expectedCPUQuota), "bad cpu quota")

	// Step 6: Get CPUPeriod
	command = "cat /sys/fs/cgroup/cpuset,cpu,cpuacct/cpu.cfs_period_us"
	cpuPeriodStr := f.ExecShellInContainer(pod.Name, containerName, command)
	cpuPeriod := strings.Replace(cpuPeriodStr, "\n", "", -1)
	framework.Logf("get pod cpuPeriod: %s", cpuPeriod)
	Expect(cpuPeriod).To(Equal(testCase.expectedCPUPeriod), "bad cpu period")

	// Step 7: Get bvt warp ns
	command = "cat /sys/fs/cgroup/cpuset,cpu,cpuacct/cpu.bvt_warp_ns"
	cpuBvtWarpNSStr := f.ExecShellInContainer(pod.Name, containerName, command)
	cpuBvtWarpNS := strings.Replace(cpuBvtWarpNSStr, "\n", "", -1)
	framework.Logf("get pod cpuBvtWarpNS: %s", cpuBvtWarpNS)
	Expect(cpuBvtWarpNS).To(Equal(testCase.expectedCPUBvtWarpNS), "bad cpu bvt warp ns")

	// Step 8: Get cgroup parent
	cgroupParentRaw := getCgroupParent(getPod)
	// There is \n in the end of the result generated by staragent.
	// Remove it.
	cgroupParent := strings.Replace(cgroupParentRaw, "\n", "", -1)
	if len(cgroupParent) == 0 {
		framework.Failf("Failed to get cgroup parent when pod is created")
	}
	// We get cgroup parent like this "/sigma-stream/pod189e64ec-269e-11e9-8429-02420ba6b2ad".
	framework.Logf("cgroup parent is %s", cgroupParent)
	Expect(strings.HasPrefix(cgroupParent, testCase.expectedCgroupParent)).Should(BeTrue())

	// TODO(kubo.cph), check oom score.
}

var _ = Describe("[sigma-kubelet][set-cgroup-by-host-config-001] set cgroup by host config test", func() {
	f := framework.NewDefaultFramework("sigma-kubelet")
	It("[smoke][ant] set cgroup by host config with proper value", func() {
		cgroupParent := "/sigma-stream"
		cpuShares := int64(2048)
		cpuPeriod := int64(150000)
		cpuQuota := int64(300000)
		cpuBvtWarpNS := int(-1)
		oomScore := int64(1000)

		testCase := &setCgroupTestCase{
			description:          "set cgroup by host config",
			cgroupParent:         cgroupParent,
			cpuShares:            cpuShares,
			cpuPeriod:            cpuPeriod,
			cpuQuota:             cpuQuota,
			cpuBvtWarpNS:         cpuBvtWarpNS,
			oomScore:             oomScore,
			expectedCgroupParent: cgroupParent,
			expectedCPUShares:    fmt.Sprintf("%d", cpuShares),
			expectedCPUPeriod:    fmt.Sprintf("%d", cpuPeriod),
			expectedCPUQuota:     fmt.Sprintf("%d", cpuQuota),
			expectedCPUBvtWarpNS: fmt.Sprintf("%d", cpuBvtWarpNS),
			expectedOOMScore:     fmt.Sprintf("%d", oomScore),
		}
		doSetCgroupTestCase(f, testCase)
	})

	It("[smoke][ant] set cgroup by host config with too small cpushares value", func() {
		cgroupParent := "/sigma-stream"
		cpuShares := int64(1)
		cpuPeriod := int64(150000)
		cpuQuota := int64(300000)
		cpuBvtWarpNS := int(-1)
		oomScore := int64(1000)

		testCase := &setCgroupTestCase{
			description:          "set cgroup by host config",
			cgroupParent:         cgroupParent,
			cpuShares:            cpuShares,
			cpuPeriod:            cpuPeriod,
			cpuQuota:             cpuQuota,
			cpuBvtWarpNS:         cpuBvtWarpNS,
			oomScore:             oomScore,
			expectedCgroupParent: cgroupParent,
			expectedCPUShares:    fmt.Sprintf("%d", 2), // kubelet should set cpushares to min value.
			expectedCPUPeriod:    fmt.Sprintf("%d", cpuPeriod),
			expectedCPUQuota:     fmt.Sprintf("%d", cpuQuota),
			expectedCPUBvtWarpNS: fmt.Sprintf("%d", cpuBvtWarpNS),
			expectedOOMScore:     fmt.Sprintf("%d", oomScore),
		}
		doSetCgroupTestCase(f, testCase)
	})

	It("[smoke][ant] set cgroup by host config with totally wrong value", func() {
		// wrong values.
		cpuShares := int64(-1)
		cpuPeriod := int64(-150000)
		cpuQuota := int64(-300000)

		// proper values.
		cgroupParent := "/sigma"
		cpuBvtWarpNS := int(2)
		oomScore := int64(-1000)

		testCase := &setCgroupTestCase{
			description:          "set cgroup by host config",
			cgroupParent:         cgroupParent,
			cpuShares:            cpuShares,
			cpuPeriod:            cpuPeriod,
			cpuQuota:             cpuQuota,
			cpuBvtWarpNS:         cpuBvtWarpNS,
			oomScore:             oomScore,
			expectedCgroupParent: cgroupParent,
			// kubelet should set the wrong values to default values.
			expectedCPUShares:    fmt.Sprintf("%d", 2),
			expectedCPUPeriod:    fmt.Sprintf("%d", 100000),
			expectedCPUQuota:     fmt.Sprintf("%d", -1),
			expectedCPUBvtWarpNS: fmt.Sprintf("%d", cpuBvtWarpNS),
			expectedOOMScore:     fmt.Sprintf("%d", oomScore),
		}
		doSetCgroupTestCase(f, testCase)
	})
})
