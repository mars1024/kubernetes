// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "gitlab.alipay-inc.com/antcloud-aks/cafe-cluster-operator/pkg/apis/cluster/v1alpha1"
	scheme "gitlab.alipay-inc.com/antcloud-aks/cafe-cluster-operator/pkg/client/clientset_generated/clientset/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// BucketsGetter has a method to return a BucketInterface.
// A group's client should implement this interface.
type BucketsGetter interface {
	Buckets() BucketInterface
}

// BucketInterface has methods to work with Bucket resources.
type BucketInterface interface {
	Create(*v1alpha1.Bucket) (*v1alpha1.Bucket, error)
	Update(*v1alpha1.Bucket) (*v1alpha1.Bucket, error)
	UpdateStatus(*v1alpha1.Bucket) (*v1alpha1.Bucket, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.Bucket, error)
	List(opts v1.ListOptions) (*v1alpha1.BucketList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Bucket, err error)
	BucketExpansion
}

// buckets implements BucketInterface
type buckets struct {
	client rest.Interface
}

// newBuckets returns a Buckets
func newBuckets(c *ClusterV1alpha1Client) *buckets {
	return &buckets{
		client: c.RESTClient(),
	}
}

// Get takes name of the bucket, and returns the corresponding bucket object, and an error if there is any.
func (c *buckets) Get(name string, options v1.GetOptions) (result *v1alpha1.Bucket, err error) {
	result = &v1alpha1.Bucket{}
	err = c.client.Get().
		Resource("buckets").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of Buckets that match those selectors.
func (c *buckets) List(opts v1.ListOptions) (result *v1alpha1.BucketList, err error) {
	result = &v1alpha1.BucketList{}
	err = c.client.Get().
		Resource("buckets").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested buckets.
func (c *buckets) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("buckets").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a bucket and creates it.  Returns the server's representation of the bucket, and an error, if there is any.
func (c *buckets) Create(bucket *v1alpha1.Bucket) (result *v1alpha1.Bucket, err error) {
	result = &v1alpha1.Bucket{}
	err = c.client.Post().
		Resource("buckets").
		Body(bucket).
		Do().
		Into(result)
	return
}

// Update takes the representation of a bucket and updates it. Returns the server's representation of the bucket, and an error, if there is any.
func (c *buckets) Update(bucket *v1alpha1.Bucket) (result *v1alpha1.Bucket, err error) {
	result = &v1alpha1.Bucket{}
	err = c.client.Put().
		Resource("buckets").
		Name(bucket.Name).
		Body(bucket).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *buckets) UpdateStatus(bucket *v1alpha1.Bucket) (result *v1alpha1.Bucket, err error) {
	result = &v1alpha1.Bucket{}
	err = c.client.Put().
		Resource("buckets").
		Name(bucket.Name).
		SubResource("status").
		Body(bucket).
		Do().
		Into(result)
	return
}

// Delete takes name of the bucket and deletes it. Returns an error if one occurs.
func (c *buckets) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("buckets").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *buckets) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Resource("buckets").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched bucket.
func (c *buckets) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.Bucket, err error) {
	result = &v1alpha1.Bucket{}
	err = c.client.Patch(pt).
		Resource("buckets").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
