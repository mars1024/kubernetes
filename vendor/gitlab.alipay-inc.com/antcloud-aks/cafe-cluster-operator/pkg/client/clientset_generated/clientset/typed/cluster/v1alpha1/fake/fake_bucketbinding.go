// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "gitlab.alipay-inc.com/antcloud-aks/cafe-cluster-operator/pkg/apis/cluster/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeBucketBindings implements BucketBindingInterface
type FakeBucketBindings struct {
	Fake *FakeClusterV1alpha1
}

var bucketbindingsResource = schema.GroupVersionResource{Group: "cluster.aks.cafe.sofastack.io", Version: "v1alpha1", Resource: "bucketbindings"}

var bucketbindingsKind = schema.GroupVersionKind{Group: "cluster.aks.cafe.sofastack.io", Version: "v1alpha1", Kind: "BucketBinding"}

// Get takes name of the bucketBinding, and returns the corresponding bucketBinding object, and an error if there is any.
func (c *FakeBucketBindings) Get(name string, options v1.GetOptions) (result *v1alpha1.BucketBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(bucketbindingsResource, name), &v1alpha1.BucketBinding{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketBinding), err
}

// List takes label and field selectors, and returns the list of BucketBindings that match those selectors.
func (c *FakeBucketBindings) List(opts v1.ListOptions) (result *v1alpha1.BucketBindingList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(bucketbindingsResource, bucketbindingsKind, opts), &v1alpha1.BucketBindingList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.BucketBindingList{ListMeta: obj.(*v1alpha1.BucketBindingList).ListMeta}
	for _, item := range obj.(*v1alpha1.BucketBindingList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested bucketBindings.
func (c *FakeBucketBindings) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(bucketbindingsResource, opts))
}

// Create takes the representation of a bucketBinding and creates it.  Returns the server's representation of the bucketBinding, and an error, if there is any.
func (c *FakeBucketBindings) Create(bucketBinding *v1alpha1.BucketBinding) (result *v1alpha1.BucketBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(bucketbindingsResource, bucketBinding), &v1alpha1.BucketBinding{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketBinding), err
}

// Update takes the representation of a bucketBinding and updates it. Returns the server's representation of the bucketBinding, and an error, if there is any.
func (c *FakeBucketBindings) Update(bucketBinding *v1alpha1.BucketBinding) (result *v1alpha1.BucketBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(bucketbindingsResource, bucketBinding), &v1alpha1.BucketBinding{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketBinding), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeBucketBindings) UpdateStatus(bucketBinding *v1alpha1.BucketBinding) (*v1alpha1.BucketBinding, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(bucketbindingsResource, "status", bucketBinding), &v1alpha1.BucketBinding{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketBinding), err
}

// Delete takes name of the bucketBinding and deletes it. Returns an error if one occurs.
func (c *FakeBucketBindings) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(bucketbindingsResource, name), &v1alpha1.BucketBinding{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeBucketBindings) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(bucketbindingsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.BucketBindingList{})
	return err
}

// Patch applies the patch and returns the patched bucketBinding.
func (c *FakeBucketBindings) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.BucketBinding, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(bucketbindingsResource, name, data, subresources...), &v1alpha1.BucketBinding{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.BucketBinding), err
}
