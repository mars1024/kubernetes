/*
Copyright 2017 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was autogenerated by apiregister-gen. Do not edit it manually!

package cluster

import (
	"context"
	"fmt"

	"github.com/kubernetes-incubator/apiserver-builder/pkg/builders"
	corev1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/apis/meta/internalversion"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apiserver/pkg/registry/rest"
)

var (
	InternalMinionCluster = builders.NewInternalResource(
		"minionclusters",
		"MinionCluster",
		func() runtime.Object { return &MinionCluster{} },
		func() runtime.Object { return &MinionClusterList{} },
	)
	InternalMinionClusterStatus = builders.NewInternalResourceStatus(
		"minionclusters",
		"MinionClusterStatus",
		func() runtime.Object { return &MinionCluster{} },
		func() runtime.Object { return &MinionClusterList{} },
	)
	// Registered resources and subresources
	ApiVersion = builders.NewApiGroup("cluster.cafe.cloud.alipay.com").WithKinds(
		InternalMinionCluster,
		InternalMinionClusterStatus,
	)

	// Required by code generated by go2idl
	AddToScheme        = ApiVersion.SchemaBuilder.AddToScheme
	SchemeBuilder      = ApiVersion.SchemaBuilder
	localSchemeBuilder = &SchemeBuilder
	SchemeGroupVersion = ApiVersion.GroupVersion
)

// Required by code generated by go2idl
// Kind takes an unqualified kind and returns a Group qualified GroupKind
func Kind(kind string) schema.GroupKind {
	return SchemeGroupVersion.WithKind(kind).GroupKind()
}

// Required by code generated by go2idl
// Resource takes an unqualified resource and returns a Group qualified GroupResource
func Resource(resource string) schema.GroupResource {
	return SchemeGroupVersion.WithResource(resource).GroupResource()
}

// +genclient
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type MinionCluster struct {
	metav1.TypeMeta
	metav1.ObjectMeta
	Spec   MinionClusterSpec
	Status MinionClusterStatus
}

type MinionClusterSpec struct {
	Networking      *Networking
	SecurityProfile SecurityProfile
}

type MinionClusterStatus struct {
	Phase              MinionClusterPhase
	ObservedGeneration int64
	Conditions         []MinionClusterCondition
}

type SecurityProfile struct {
}

type MinionClusterCondition struct {
	Type               MinionClusterConditionType
	Status             corev1.ConditionStatus
	LastTransitionTime metav1.Time
	Reason             string
	Message            string
}

type Networking struct {
	NetworkType           NetworkType
	ServiceClusterIPRange string
	ServiceNodePortRange  PortRange
	PodIPRange            map[string]string
	DNS                   *DNS
	MasterEndpointIP      string
}

type PortRange struct {
	Base int32
	Size int32
}

type DNS struct {
	Local    *LocalDNS
	External *ExternalDNS
}

type LocalDNS struct {
	ClusterIP string
	Image     string
}

type ExternalDNS struct {
}

//
// MinionCluster Functions and Structs
//
// +k8s:deepcopy-gen=false
type MinionClusterStrategy struct {
	builders.DefaultStorageStrategy
}

// +k8s:deepcopy-gen=false
type MinionClusterStatusStrategy struct {
	builders.DefaultStatusStorageStrategy
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object

type MinionClusterList struct {
	metav1.TypeMeta
	metav1.ListMeta
	Items []MinionCluster
}

func (MinionCluster) NewStatus() interface{} {
	return MinionClusterStatus{}
}

func (pc *MinionCluster) GetStatus() interface{} {
	return pc.Status
}

func (pc *MinionCluster) SetStatus(s interface{}) {
	pc.Status = s.(MinionClusterStatus)
}

func (pc *MinionCluster) GetSpec() interface{} {
	return pc.Spec
}

func (pc *MinionCluster) SetSpec(s interface{}) {
	pc.Spec = s.(MinionClusterSpec)
}

func (pc *MinionCluster) GetObjectMeta() *metav1.ObjectMeta {
	return &pc.ObjectMeta
}

func (pc *MinionCluster) SetGeneration(generation int64) {
	pc.ObjectMeta.Generation = generation
}

func (pc MinionCluster) GetGeneration() int64 {
	return pc.ObjectMeta.Generation
}

// Registry is an interface for things that know how to store MinionCluster.
// +k8s:deepcopy-gen=false
type MinionClusterRegistry interface {
	ListMinionClusters(ctx context.Context, options *internalversion.ListOptions) (*MinionClusterList, error)
	GetMinionCluster(ctx context.Context, id string, options *metav1.GetOptions) (*MinionCluster, error)
	CreateMinionCluster(ctx context.Context, id *MinionCluster) (*MinionCluster, error)
	UpdateMinionCluster(ctx context.Context, id *MinionCluster) (*MinionCluster, error)
	DeleteMinionCluster(ctx context.Context, id string) (bool, error)
}

// NewRegistry returns a new Registry interface for the given Storage. Any mismatched types will panic.
func NewMinionClusterRegistry(sp builders.StandardStorageProvider) MinionClusterRegistry {
	return &storageMinionCluster{sp}
}

// Implement Registry
// storage puts strong typing around storage calls
// +k8s:deepcopy-gen=false
type storageMinionCluster struct {
	builders.StandardStorageProvider
}

func (s *storageMinionCluster) ListMinionClusters(ctx context.Context, options *internalversion.ListOptions) (*MinionClusterList, error) {
	if options != nil && options.FieldSelector != nil && !options.FieldSelector.Empty() {
		return nil, fmt.Errorf("field selector not supported yet")
	}
	st := s.GetStandardStorage()
	obj, err := st.List(ctx, options)
	if err != nil {
		return nil, err
	}
	return obj.(*MinionClusterList), err
}

func (s *storageMinionCluster) GetMinionCluster(ctx context.Context, id string, options *metav1.GetOptions) (*MinionCluster, error) {
	st := s.GetStandardStorage()
	obj, err := st.Get(ctx, id, options)
	if err != nil {
		return nil, err
	}
	return obj.(*MinionCluster), nil
}

func (s *storageMinionCluster) CreateMinionCluster(ctx context.Context, object *MinionCluster) (*MinionCluster, error) {
	st := s.GetStandardStorage()
	obj, err := st.Create(ctx, object, nil, &metav1.CreateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*MinionCluster), nil
}

func (s *storageMinionCluster) UpdateMinionCluster(ctx context.Context, object *MinionCluster) (*MinionCluster, error) {
	st := s.GetStandardStorage()
	obj, _, err := st.Update(ctx, object.Name, rest.DefaultUpdatedObjectInfo(object), nil, nil, false, &metav1.UpdateOptions{})
	if err != nil {
		return nil, err
	}
	return obj.(*MinionCluster), nil
}

func (s *storageMinionCluster) DeleteMinionCluster(ctx context.Context, id string) (bool, error) {
	st := s.GetStandardStorage()
	_, sync, err := st.Delete(ctx, id, &metav1.DeleteOptions{})
	return sync, err
}
