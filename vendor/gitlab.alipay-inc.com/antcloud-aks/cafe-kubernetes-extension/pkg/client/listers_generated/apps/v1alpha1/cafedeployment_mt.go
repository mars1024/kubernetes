// +build multitenancy

/*
Copyright 2018 The Alipay.com Inc Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"fmt"
	"runtime/debug"

	"gitlab.alipay-inc.com/antcloud-aks/aks-k8s-api/pkg/multitenancy"
	multitenancycache "gitlab.alipay-inc.com/antcloud-aks/aks-k8s-api/pkg/multitenancy/cache"
	multitenancyutil "gitlab.alipay-inc.com/antcloud-aks/aks-k8s-api/pkg/multitenancy/util"
	v1alpha1 "gitlab.alipay-inc.com/antcloud-aks/cafe-kubernetes-extension/pkg/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// CafeDeploymentLister helps list CafeDeployments.
type CafeDeploymentLister interface {
	// List lists all CafeDeployments in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.CafeDeployment, err error)
	// CafeDeployments returns an object that can list and get CafeDeployments.
	CafeDeployments(namespace string) CafeDeploymentNamespaceLister
	CafeDeploymentListerExpansion
}

type cafeDeploymentLister struct {
	indexer cache.Indexer
	tenant  multitenancy.TenantInfo
}

func (s *cafeDeploymentLister) ShallowCopyWithTenant(tenant multitenancy.TenantInfo) interface{} {
	return &cafeDeploymentLister{
		indexer: s.indexer,
		tenant:  tenant,
	}
}

// NewCafeDeploymentLister returns a new CafeDeploymentLister.
func NewCafeDeploymentLister(indexer cache.Indexer) CafeDeploymentLister {
	return &cafeDeploymentLister{indexer: indexer}
}

// List lists all CafeDeployments in the indexer.
func (s *cafeDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.CafeDeployment, err error) {
	if s.tenant != nil {
		err = multitenancycache.ListAllWithTenant(s.indexer, selector, s.tenant, func(m interface{}) {
			ret = append(ret, m.(*v1alpha1.CafeDeployment))
		})
	} else {
		err = cache.ListAll(s.indexer, selector, func(m interface{}) {
			ret = append(ret, m.(*v1alpha1.CafeDeployment))
		})
	}
	return ret, err
}

// CafeDeployments returns an object that can list and get CafeDeployments.
func (s *cafeDeploymentLister) CafeDeployments(namespace string) CafeDeploymentNamespaceLister {
	return cafeDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: s.tenant}
}

// CafeDeploymentNamespaceLister helps list and get CafeDeployments.
type CafeDeploymentNamespaceLister interface {
	// List lists all CafeDeployments in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.CafeDeployment, err error)
	// Get retrieves the CafeDeployment from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.CafeDeployment, error)
	CafeDeploymentNamespaceListerExpansion
}

// cafeDeploymentNamespaceLister implements the CafeDeploymentNamespaceLister
// interface.
type cafeDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
	tenant    multitenancy.TenantInfo
}

// List lists all CafeDeployments in the indexer for a given namespace.
func (s cafeDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.CafeDeployment, err error) {
	if s.tenant == nil {
		debug.PrintStack()
		// fail hard so that we don't allow any namespaced lister w/o tenant
		return nil, fmt.Errorf("cannot namespaced list resources w/o specifying tenant")
	}
	err = multitenancycache.ListAllByNamespaceWithTenant(s.indexer, s.namespace, selector, s.tenant, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.CafeDeployment))
	})

	return ret, err
}

// Get retrieves the CafeDeployment from the indexer for a given namespace and name.
func (s cafeDeploymentNamespaceLister) Get(name string) (*v1alpha1.CafeDeployment, error) {
	if s.tenant == nil {
		debug.PrintStack()
		// fail hard so that we don't allow any namespaced lister w/o tenant
		return nil, fmt.Errorf("cannot namespaced get resources w/o specifying tenant")
	}
	obj, exists, err := s.indexer.GetByKey(multitenancyutil.TransformTenantInfoToJointString(s.tenant, "/") + "/" + s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("cafedeployment"), name)
	}
	return obj.(*v1alpha1.CafeDeployment), nil
}
