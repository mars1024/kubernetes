// +build multitenancy

/*
Copyright 2018 The Alipay.com Inc Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"fmt"
	"runtime/debug"

	"gitlab.alipay-inc.com/antcloud-aks/aks-k8s-api/pkg/multitenancy"
	multitenancycache "gitlab.alipay-inc.com/antcloud-aks/aks-k8s-api/pkg/multitenancy/cache"
	multitenancyutil "gitlab.alipay-inc.com/antcloud-aks/aks-k8s-api/pkg/multitenancy/util"
	v1alpha1 "gitlab.alipay-inc.com/antcloud-aks/cafe-kubernetes-extension/pkg/apis/apps/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// InPlaceSetLister helps list InPlaceSets.
type InPlaceSetLister interface {
	// List lists all InPlaceSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.InPlaceSet, err error)
	// InPlaceSets returns an object that can list and get InPlaceSets.
	InPlaceSets(namespace string) InPlaceSetNamespaceLister
	InPlaceSetListerExpansion
}

type inPlaceSetLister struct {
	indexer cache.Indexer
	tenant  multitenancy.TenantInfo
}

func (s *inPlaceSetLister) ShallowCopyWithTenant(tenant multitenancy.TenantInfo) interface{} {
	return &inPlaceSetLister{
		indexer: s.indexer,
		tenant:  tenant,
	}
}

// NewInPlaceSetLister returns a new InPlaceSetLister.
func NewInPlaceSetLister(indexer cache.Indexer) InPlaceSetLister {
	return &inPlaceSetLister{indexer: indexer}
}

// List lists all InPlaceSets in the indexer.
func (s *inPlaceSetLister) List(selector labels.Selector) (ret []*v1alpha1.InPlaceSet, err error) {
	if s.tenant != nil {
		err = multitenancycache.ListAllWithTenant(s.indexer, selector, s.tenant, func(m interface{}) {
			ret = append(ret, m.(*v1alpha1.InPlaceSet))
		})
	} else {
		err = cache.ListAll(s.indexer, selector, func(m interface{}) {
			ret = append(ret, m.(*v1alpha1.InPlaceSet))
		})
	}
	return ret, err
}

// InPlaceSets returns an object that can list and get InPlaceSets.
func (s *inPlaceSetLister) InPlaceSets(namespace string) InPlaceSetNamespaceLister {
	return inPlaceSetNamespaceLister{indexer: s.indexer, namespace: namespace, tenant: s.tenant}
}

// InPlaceSetNamespaceLister helps list and get InPlaceSets.
type InPlaceSetNamespaceLister interface {
	// List lists all InPlaceSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.InPlaceSet, err error)
	// Get retrieves the InPlaceSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.InPlaceSet, error)
	InPlaceSetNamespaceListerExpansion
}

// inPlaceSetNamespaceLister implements the InPlaceSetNamespaceLister
// interface.
type inPlaceSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
	tenant    multitenancy.TenantInfo
}

// List lists all InPlaceSets in the indexer for a given namespace.
func (s inPlaceSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.InPlaceSet, err error) {
	if s.tenant == nil {
		debug.PrintStack()
		// fail hard so that we don't allow any namespaced lister w/o tenant
		return nil, fmt.Errorf("cannot namespaced list resources w/o specifying tenant")
	}
	err = multitenancycache.ListAllByNamespaceWithTenant(s.indexer, s.namespace, selector, s.tenant, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.InPlaceSet))
	})

	return ret, err
}

// Get retrieves the InPlaceSet from the indexer for a given namespace and name.
func (s inPlaceSetNamespaceLister) Get(name string) (*v1alpha1.InPlaceSet, error) {
	if s.tenant == nil {
		debug.PrintStack()
		// fail hard so that we don't allow any namespaced lister w/o tenant
		return nil, fmt.Errorf("cannot namespaced get resources w/o specifying tenant")
	}
	obj, exists, err := s.indexer.GetByKey(multitenancyutil.TransformTenantInfoToJointString(s.tenant, "/") + "/" + s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("inplaceset"), name)
	}
	return obj.(*v1alpha1.InPlaceSet), nil
}
