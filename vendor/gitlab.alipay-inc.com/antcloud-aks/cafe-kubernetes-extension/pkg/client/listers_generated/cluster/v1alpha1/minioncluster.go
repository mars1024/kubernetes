// +build !multitenancy

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "gitlab.alipay-inc.com/antcloud-aks/cafe-kubernetes-extension/pkg/apis/cluster/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MinionClusterLister helps list MinionClusters.
type MinionClusterLister interface {
	// List lists all MinionClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.MinionCluster, err error)
	// Get retrieves the MinionCluster from the index for a given name.
	Get(name string) (*v1alpha1.MinionCluster, error)
	MinionClusterListerExpansion
}

// minionClusterLister implements the MinionClusterLister interface.
type minionClusterLister struct {
	indexer cache.Indexer
}

// NewMinionClusterLister returns a new MinionClusterLister.
func NewMinionClusterLister(indexer cache.Indexer) MinionClusterLister {
	return &minionClusterLister{indexer: indexer}
}

// List lists all MinionClusters in the indexer.
func (s *minionClusterLister) List(selector labels.Selector) (ret []*v1alpha1.MinionCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MinionCluster))
	})
	return ret, err
}

// Get retrieves the MinionCluster from the index for a given name.
func (s *minionClusterLister) Get(name string) (*v1alpha1.MinionCluster, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("minioncluster"), name)
	}
	return obj.(*v1alpha1.MinionCluster), nil
}
