/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by informer-gen. DO NOT EDIT.

package informers

import (
	time "time"

	apiextensions "gitlab.alipay-inc.com/sigma/clientset/informers/apiextensions"
	apiregistration "gitlab.alipay-inc.com/sigma/clientset/informers/apiregistration"
	cluster "gitlab.alipay-inc.com/sigma/clientset/informers/cluster"
	kok "gitlab.alipay-inc.com/sigma/clientset/informers/kok"
	machine "gitlab.alipay-inc.com/sigma/clientset/informers/machine"
	monitoring "gitlab.alipay-inc.com/sigma/clientset/informers/monitoring"
	network "gitlab.alipay-inc.com/sigma/clientset/informers/network"
	ops "gitlab.alipay-inc.com/sigma/clientset/informers/ops"
	profile "gitlab.alipay-inc.com/sigma/clientset/informers/profile"
	promotion "gitlab.alipay-inc.com/sigma/clientset/informers/promotion"
	quota "gitlab.alipay-inc.com/sigma/clientset/informers/quota"
	schedulingextensions "gitlab.alipay-inc.com/sigma/clientset/informers/schedulingextensions"
	storageextensions "gitlab.alipay-inc.com/sigma/clientset/informers/storageextensions"
	kubernetes "gitlab.alipay-inc.com/sigma/clientset/kubernetes"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	informers "k8s.io/client-go/informers"
	internalinterfaces "k8s.io/client-go/informers/internalinterfaces"
)

// SharedInformerOption defines the functional option type for SharedInformerFactory.
type SharedInformerOption func(*sharedInformerFactory) *sharedInformerFactory

type sharedInformerFactory struct {
	informers.SharedInformerFactory
	client           kubernetes.Interface
	namespace        string
	tweakListOptions internalinterfaces.TweakListOptionsFunc
	resyncConfig     map[v1.Object]time.Duration
}

// WithCustomResyncConfig sets a custom resync period for the specified informer types.
func WithCustomResyncConfig(resyncConfig map[v1.Object]time.Duration) SharedInformerOption {
	return func(factory *sharedInformerFactory) *sharedInformerFactory {
		factory.resyncConfig = resyncConfig
		return factory
	}
}

// WithTweakListOptions sets a custom filter on all listers of the configured SharedInformerFactory.
func WithTweakListOptions(tweakListOptions internalinterfaces.TweakListOptionsFunc) SharedInformerOption {
	return func(factory *sharedInformerFactory) *sharedInformerFactory {
		factory.tweakListOptions = tweakListOptions
		return factory
	}
}

// WithNamespace limits the SharedInformerFactory to the specified namespace.
func WithNamespace(namespace string) SharedInformerOption {
	return func(factory *sharedInformerFactory) *sharedInformerFactory {
		factory.namespace = namespace
		return factory
	}
}

// NewSharedInformerFactory constructs a new instance of sharedInformerFactory for all namespaces.
func NewSharedInformerFactory(client kubernetes.Interface, defaultResync time.Duration) SharedInformerFactory {
	return NewSharedInformerFactoryWithOptions(client, defaultResync)
}

// NewFilteredSharedInformerFactory constructs a new instance of sharedInformerFactory.
// Listers obtained via this SharedInformerFactory will be subject to the same filters
// as specified here.
// Deprecated: Please use NewSharedInformerFactoryWithOptions instead
func NewFilteredSharedInformerFactory(client kubernetes.Interface, defaultResync time.Duration, namespace string, tweakListOptions internalinterfaces.TweakListOptionsFunc) SharedInformerFactory {
	return NewSharedInformerFactoryWithOptions(client, defaultResync, WithNamespace(namespace), WithTweakListOptions(tweakListOptions))
}

// NewSharedInformerFactoryWithOptions constructs a new instance of a SharedInformerFactory with additional options.
func NewSharedInformerFactoryWithOptions(client kubernetes.Interface, defaultResync time.Duration, options ...SharedInformerOption) SharedInformerFactory {
	factory := &sharedInformerFactory{
		namespace: v1.NamespaceAll,
	}

	// Apply all options
	for _, opt := range options {
		factory = opt(factory)
	}

	opts := []informers.SharedInformerOption{}
	if factory.namespace != v1.NamespaceAll {
		opts = append(opts, informers.WithNamespace(factory.namespace))
	}
	if factory.tweakListOptions != nil {
		opts = append(opts, informers.WithTweakListOptions(factory.tweakListOptions))
	}
	if factory.resyncConfig != nil {
		opts = append(opts, informers.WithCustomResyncConfig(factory.resyncConfig))
	}

	factory.SharedInformerFactory = informers.NewSharedInformerFactoryWithOptions(client, defaultResync, opts...)

	return factory
}

// SharedInformerFactory provides shared informers for resources in all known
// API group versions.
type SharedInformerFactory interface {
	informers.SharedInformerFactory

	Apiextensions() apiextensions.Interface
	Apiregistration() apiregistration.Interface
	Cluster() cluster.Interface
	Kok() kok.Interface
	Machine() machine.Interface
	Monitoring() monitoring.Interface
	Network() network.Interface
	Ops() ops.Interface
	Profile() profile.Interface
	Promotion() promotion.Interface
	Quota() quota.Interface
	Schedulingextensions() schedulingextensions.Interface
	Storageextensions() storageextensions.Interface
}

func (f *sharedInformerFactory) Apiextensions() apiextensions.Interface {
	return apiextensions.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Apiregistration() apiregistration.Interface {
	return apiregistration.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Cluster() cluster.Interface {
	return cluster.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Kok() kok.Interface {
	return kok.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Machine() machine.Interface {
	return machine.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Monitoring() monitoring.Interface {
	return monitoring.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Network() network.Interface {
	return network.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Ops() ops.Interface {
	return ops.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Profile() profile.Interface {
	return profile.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Promotion() promotion.Interface {
	return promotion.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Quota() quota.Interface {
	return quota.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Schedulingextensions() schedulingextensions.Interface {
	return schedulingextensions.New(f, f.namespace, f.tweakListOptions)
}

func (f *sharedInformerFactory) Storageextensions() storageextensions.Interface {
	return storageextensions.New(f, f.namespace, f.tweakListOptions)
}
