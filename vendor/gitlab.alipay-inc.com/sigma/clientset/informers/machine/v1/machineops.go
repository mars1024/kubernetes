/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by informer-gen. DO NOT EDIT.

package v1

import (
	time "time"

	kubernetes "gitlab.alipay-inc.com/sigma/clientset/kubernetes"
	v1 "gitlab.alipay-inc.com/sigma/clientset/listers/machine/v1"
	machinev1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/machine/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	internalinterfaces "k8s.io/client-go/informers/internalinterfaces"
	clientgokubernetes "k8s.io/client-go/kubernetes"
	cache "k8s.io/client-go/tools/cache"
)

// MachineOpsInformer provides access to a shared informer and lister for
// MachineOpses.
type MachineOpsInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() v1.MachineOpsLister
}

type machineOpsInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewMachineOpsInformer constructs a new informer for MachineOps type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewMachineOpsInformer(client kubernetes.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredMachineOpsInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredMachineOpsInformer constructs a new informer for MachineOps type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredMachineOpsInformer(client kubernetes.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.MachineV1().MachineOpses().List(options)
			},
			WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.MachineV1().MachineOpses().Watch(options)
			},
		},
		&machinev1.MachineOps{},
		resyncPeriod,
		indexers,
	)
}

func (f *machineOpsInformer) defaultInformer(client clientgokubernetes.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredMachineOpsInformer(client.(kubernetes.Interface), resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *machineOpsInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&machinev1.MachineOps{}, f.defaultInformer)
}

func (f *machineOpsInformer) Lister() v1.MachineOpsLister {
	return v1.NewMachineOpsLister(f.Informer().GetIndexer())
}
