/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	machinev1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/machine/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeMachineOpses implements MachineOpsInterface
type FakeMachineOpses struct {
	Fake *FakeMachineV1
}

var machineopsesResource = schema.GroupVersionResource{Group: "machine.sigma.alipay.com", Version: "v1", Resource: "machineopses"}

var machineopsesKind = schema.GroupVersionKind{Group: "machine.sigma.alipay.com", Version: "v1", Kind: "MachineOps"}

// Get takes name of the machineOps, and returns the corresponding machineOps object, and an error if there is any.
func (c *FakeMachineOpses) Get(name string, options v1.GetOptions) (result *machinev1.MachineOps, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(machineopsesResource, name), &machinev1.MachineOps{})
	if obj == nil {
		return nil, err
	}
	return obj.(*machinev1.MachineOps), err
}

// List takes label and field selectors, and returns the list of MachineOpses that match those selectors.
func (c *FakeMachineOpses) List(opts v1.ListOptions) (result *machinev1.MachineOpsList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(machineopsesResource, machineopsesKind, opts), &machinev1.MachineOpsList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &machinev1.MachineOpsList{ListMeta: obj.(*machinev1.MachineOpsList).ListMeta}
	for _, item := range obj.(*machinev1.MachineOpsList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested machineOpses.
func (c *FakeMachineOpses) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(machineopsesResource, opts))
}

// Create takes the representation of a machineOps and creates it.  Returns the server's representation of the machineOps, and an error, if there is any.
func (c *FakeMachineOpses) Create(machineOps *machinev1.MachineOps) (result *machinev1.MachineOps, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(machineopsesResource, machineOps), &machinev1.MachineOps{})
	if obj == nil {
		return nil, err
	}
	return obj.(*machinev1.MachineOps), err
}

// Update takes the representation of a machineOps and updates it. Returns the server's representation of the machineOps, and an error, if there is any.
func (c *FakeMachineOpses) Update(machineOps *machinev1.MachineOps) (result *machinev1.MachineOps, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(machineopsesResource, machineOps), &machinev1.MachineOps{})
	if obj == nil {
		return nil, err
	}
	return obj.(*machinev1.MachineOps), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeMachineOpses) UpdateStatus(machineOps *machinev1.MachineOps) (*machinev1.MachineOps, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(machineopsesResource, "status", machineOps), &machinev1.MachineOps{})
	if obj == nil {
		return nil, err
	}
	return obj.(*machinev1.MachineOps), err
}

// Delete takes name of the machineOps and deletes it. Returns an error if one occurs.
func (c *FakeMachineOpses) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(machineopsesResource, name), &machinev1.MachineOps{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeMachineOpses) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(machineopsesResource, listOptions)

	_, err := c.Fake.Invokes(action, &machinev1.MachineOpsList{})
	return err
}

// Patch applies the patch and returns the patched machineOps.
func (c *FakeMachineOpses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *machinev1.MachineOps, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(machineopsesResource, name, data, subresources...), &machinev1.MachineOps{})
	if obj == nil {
		return nil, err
	}
	return obj.(*machinev1.MachineOps), err
}
