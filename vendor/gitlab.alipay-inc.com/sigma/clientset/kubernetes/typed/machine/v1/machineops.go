/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	scheme "gitlab.alipay-inc.com/sigma/clientset/kubernetes/scheme"
	v1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/machine/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MachineOpsesGetter has a method to return a MachineOpsInterface.
// A group's client should implement this interface.
type MachineOpsesGetter interface {
	MachineOpses() MachineOpsInterface
}

// MachineOpsInterface has methods to work with MachineOps resources.
type MachineOpsInterface interface {
	Create(*v1.MachineOps) (*v1.MachineOps, error)
	Update(*v1.MachineOps) (*v1.MachineOps, error)
	UpdateStatus(*v1.MachineOps) (*v1.MachineOps, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.MachineOps, error)
	List(opts metav1.ListOptions) (*v1.MachineOpsList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.MachineOps, err error)
	MachineOpsExpansion
}

// machineOpses implements MachineOpsInterface
type machineOpses struct {
	client rest.Interface
}

// newMachineOpses returns a MachineOpses
func newMachineOpses(c *MachineV1Client) *machineOpses {
	return &machineOpses{
		client: c.RESTClient(),
	}
}

// Get takes name of the machineOps, and returns the corresponding machineOps object, and an error if there is any.
func (c *machineOpses) Get(name string, options metav1.GetOptions) (result *v1.MachineOps, err error) {
	result = &v1.MachineOps{}
	err = c.client.Get().
		Resource("machineopses").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of MachineOpses that match those selectors.
func (c *machineOpses) List(opts metav1.ListOptions) (result *v1.MachineOpsList, err error) {
	result = &v1.MachineOpsList{}
	err = c.client.Get().
		Resource("machineopses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested machineOpses.
func (c *machineOpses) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("machineopses").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a machineOps and creates it.  Returns the server's representation of the machineOps, and an error, if there is any.
func (c *machineOpses) Create(machineOps *v1.MachineOps) (result *v1.MachineOps, err error) {
	result = &v1.MachineOps{}
	err = c.client.Post().
		Resource("machineopses").
		Body(machineOps).
		Do().
		Into(result)
	return
}

// Update takes the representation of a machineOps and updates it. Returns the server's representation of the machineOps, and an error, if there is any.
func (c *machineOpses) Update(machineOps *v1.MachineOps) (result *v1.MachineOps, err error) {
	result = &v1.MachineOps{}
	err = c.client.Put().
		Resource("machineopses").
		Name(machineOps.Name).
		Body(machineOps).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *machineOpses) UpdateStatus(machineOps *v1.MachineOps) (result *v1.MachineOps, err error) {
	result = &v1.MachineOps{}
	err = c.client.Put().
		Resource("machineopses").
		Name(machineOps.Name).
		SubResource("status").
		Body(machineOps).
		Do().
		Into(result)
	return
}

// Delete takes name of the machineOps and deletes it. Returns an error if one occurs.
func (c *machineOpses) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("machineopses").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *machineOpses) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Resource("machineopses").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched machineOps.
func (c *machineOpses) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.MachineOps, err error) {
	result = &v1.MachineOps{}
	err = c.client.Patch(pt).
		Resource("machineopses").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
