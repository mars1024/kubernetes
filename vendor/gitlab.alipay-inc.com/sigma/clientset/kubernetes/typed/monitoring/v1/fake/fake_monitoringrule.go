/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	monitoringv1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/monitoring/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeMonitoringRules implements MonitoringRuleInterface
type FakeMonitoringRules struct {
	Fake *FakeMonitoringV1
}

var monitoringrulesResource = schema.GroupVersionResource{Group: "monitoring.sigma.alipay.com", Version: "v1", Resource: "monitoringrules"}

var monitoringrulesKind = schema.GroupVersionKind{Group: "monitoring.sigma.alipay.com", Version: "v1", Kind: "MonitoringRule"}

// Get takes name of the monitoringRule, and returns the corresponding monitoringRule object, and an error if there is any.
func (c *FakeMonitoringRules) Get(name string, options v1.GetOptions) (result *monitoringv1.MonitoringRule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(monitoringrulesResource, name), &monitoringv1.MonitoringRule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*monitoringv1.MonitoringRule), err
}

// List takes label and field selectors, and returns the list of MonitoringRules that match those selectors.
func (c *FakeMonitoringRules) List(opts v1.ListOptions) (result *monitoringv1.MonitoringRuleList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(monitoringrulesResource, monitoringrulesKind, opts), &monitoringv1.MonitoringRuleList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &monitoringv1.MonitoringRuleList{ListMeta: obj.(*monitoringv1.MonitoringRuleList).ListMeta}
	for _, item := range obj.(*monitoringv1.MonitoringRuleList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested monitoringRules.
func (c *FakeMonitoringRules) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(monitoringrulesResource, opts))
}

// Create takes the representation of a monitoringRule and creates it.  Returns the server's representation of the monitoringRule, and an error, if there is any.
func (c *FakeMonitoringRules) Create(monitoringRule *monitoringv1.MonitoringRule) (result *monitoringv1.MonitoringRule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(monitoringrulesResource, monitoringRule), &monitoringv1.MonitoringRule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*monitoringv1.MonitoringRule), err
}

// Update takes the representation of a monitoringRule and updates it. Returns the server's representation of the monitoringRule, and an error, if there is any.
func (c *FakeMonitoringRules) Update(monitoringRule *monitoringv1.MonitoringRule) (result *monitoringv1.MonitoringRule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(monitoringrulesResource, monitoringRule), &monitoringv1.MonitoringRule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*monitoringv1.MonitoringRule), err
}

// Delete takes name of the monitoringRule and deletes it. Returns an error if one occurs.
func (c *FakeMonitoringRules) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(monitoringrulesResource, name), &monitoringv1.MonitoringRule{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeMonitoringRules) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(monitoringrulesResource, listOptions)

	_, err := c.Fake.Invokes(action, &monitoringv1.MonitoringRuleList{})
	return err
}

// Patch applies the patch and returns the patched monitoringRule.
func (c *FakeMonitoringRules) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *monitoringv1.MonitoringRule, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(monitoringrulesResource, name, data, subresources...), &monitoringv1.MonitoringRule{})
	if obj == nil {
		return nil, err
	}
	return obj.(*monitoringv1.MonitoringRule), err
}
