/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	monitoringv1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/monitoring/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeScrapeConfigs implements ScrapeConfigInterface
type FakeScrapeConfigs struct {
	Fake *FakeMonitoringV1
	ns   string
}

var scrapeconfigsResource = schema.GroupVersionResource{Group: "monitoring.sigma.alipay.com", Version: "v1", Resource: "scrapeconfigs"}

var scrapeconfigsKind = schema.GroupVersionKind{Group: "monitoring.sigma.alipay.com", Version: "v1", Kind: "ScrapeConfig"}

// Get takes name of the scrapeConfig, and returns the corresponding scrapeConfig object, and an error if there is any.
func (c *FakeScrapeConfigs) Get(name string, options v1.GetOptions) (result *monitoringv1.ScrapeConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(scrapeconfigsResource, c.ns, name), &monitoringv1.ScrapeConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*monitoringv1.ScrapeConfig), err
}

// List takes label and field selectors, and returns the list of ScrapeConfigs that match those selectors.
func (c *FakeScrapeConfigs) List(opts v1.ListOptions) (result *monitoringv1.ScrapeConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(scrapeconfigsResource, scrapeconfigsKind, c.ns, opts), &monitoringv1.ScrapeConfigList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &monitoringv1.ScrapeConfigList{ListMeta: obj.(*monitoringv1.ScrapeConfigList).ListMeta}
	for _, item := range obj.(*monitoringv1.ScrapeConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested scrapeConfigs.
func (c *FakeScrapeConfigs) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(scrapeconfigsResource, c.ns, opts))

}

// Create takes the representation of a scrapeConfig and creates it.  Returns the server's representation of the scrapeConfig, and an error, if there is any.
func (c *FakeScrapeConfigs) Create(scrapeConfig *monitoringv1.ScrapeConfig) (result *monitoringv1.ScrapeConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(scrapeconfigsResource, c.ns, scrapeConfig), &monitoringv1.ScrapeConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*monitoringv1.ScrapeConfig), err
}

// Update takes the representation of a scrapeConfig and updates it. Returns the server's representation of the scrapeConfig, and an error, if there is any.
func (c *FakeScrapeConfigs) Update(scrapeConfig *monitoringv1.ScrapeConfig) (result *monitoringv1.ScrapeConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(scrapeconfigsResource, c.ns, scrapeConfig), &monitoringv1.ScrapeConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*monitoringv1.ScrapeConfig), err
}

// Delete takes name of the scrapeConfig and deletes it. Returns an error if one occurs.
func (c *FakeScrapeConfigs) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(scrapeconfigsResource, c.ns, name), &monitoringv1.ScrapeConfig{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeScrapeConfigs) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(scrapeconfigsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &monitoringv1.ScrapeConfigList{})
	return err
}

// Patch applies the patch and returns the patched scrapeConfig.
func (c *FakeScrapeConfigs) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *monitoringv1.ScrapeConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(scrapeconfigsResource, c.ns, name, data, subresources...), &monitoringv1.ScrapeConfig{})

	if obj == nil {
		return nil, err
	}
	return obj.(*monitoringv1.ScrapeConfig), err
}
