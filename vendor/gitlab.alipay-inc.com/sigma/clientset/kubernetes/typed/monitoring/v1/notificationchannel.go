/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	scheme "gitlab.alipay-inc.com/sigma/clientset/kubernetes/scheme"
	v1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/monitoring/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// NotificationChannelsGetter has a method to return a NotificationChannelInterface.
// A group's client should implement this interface.
type NotificationChannelsGetter interface {
	NotificationChannels() NotificationChannelInterface
}

// NotificationChannelInterface has methods to work with NotificationChannel resources.
type NotificationChannelInterface interface {
	Create(*v1.NotificationChannel) (*v1.NotificationChannel, error)
	Update(*v1.NotificationChannel) (*v1.NotificationChannel, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.NotificationChannel, error)
	List(opts metav1.ListOptions) (*v1.NotificationChannelList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.NotificationChannel, err error)
	NotificationChannelExpansion
}

// notificationChannels implements NotificationChannelInterface
type notificationChannels struct {
	client rest.Interface
}

// newNotificationChannels returns a NotificationChannels
func newNotificationChannels(c *MonitoringV1Client) *notificationChannels {
	return &notificationChannels{
		client: c.RESTClient(),
	}
}

// Get takes name of the notificationChannel, and returns the corresponding notificationChannel object, and an error if there is any.
func (c *notificationChannels) Get(name string, options metav1.GetOptions) (result *v1.NotificationChannel, err error) {
	result = &v1.NotificationChannel{}
	err = c.client.Get().
		Resource("notificationchannels").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of NotificationChannels that match those selectors.
func (c *notificationChannels) List(opts metav1.ListOptions) (result *v1.NotificationChannelList, err error) {
	result = &v1.NotificationChannelList{}
	err = c.client.Get().
		Resource("notificationchannels").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested notificationChannels.
func (c *notificationChannels) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("notificationchannels").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a notificationChannel and creates it.  Returns the server's representation of the notificationChannel, and an error, if there is any.
func (c *notificationChannels) Create(notificationChannel *v1.NotificationChannel) (result *v1.NotificationChannel, err error) {
	result = &v1.NotificationChannel{}
	err = c.client.Post().
		Resource("notificationchannels").
		Body(notificationChannel).
		Do().
		Into(result)
	return
}

// Update takes the representation of a notificationChannel and updates it. Returns the server's representation of the notificationChannel, and an error, if there is any.
func (c *notificationChannels) Update(notificationChannel *v1.NotificationChannel) (result *v1.NotificationChannel, err error) {
	result = &v1.NotificationChannel{}
	err = c.client.Put().
		Resource("notificationchannels").
		Name(notificationChannel.Name).
		Body(notificationChannel).
		Do().
		Into(result)
	return
}

// Delete takes name of the notificationChannel and deletes it. Returns an error if one occurs.
func (c *notificationChannels) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Resource("notificationchannels").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *notificationChannels) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Resource("notificationchannels").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched notificationChannel.
func (c *notificationChannels) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.NotificationChannel, err error) {
	result = &v1.NotificationChannel{}
	err = c.client.Patch(pt).
		Resource("notificationchannels").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
