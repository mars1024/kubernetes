/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	scheme "gitlab.alipay-inc.com/sigma/clientset/kubernetes/scheme"
	v1alpha1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/ops/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ClusterMachinePackageVersionsGetter has a method to return a ClusterMachinePackageVersionInterface.
// A group's client should implement this interface.
type ClusterMachinePackageVersionsGetter interface {
	ClusterMachinePackageVersions() ClusterMachinePackageVersionInterface
}

// ClusterMachinePackageVersionInterface has methods to work with ClusterMachinePackageVersion resources.
type ClusterMachinePackageVersionInterface interface {
	Create(*v1alpha1.ClusterMachinePackageVersion) (*v1alpha1.ClusterMachinePackageVersion, error)
	Update(*v1alpha1.ClusterMachinePackageVersion) (*v1alpha1.ClusterMachinePackageVersion, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.ClusterMachinePackageVersion, error)
	List(opts v1.ListOptions) (*v1alpha1.ClusterMachinePackageVersionList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ClusterMachinePackageVersion, err error)
	ClusterMachinePackageVersionExpansion
}

// clusterMachinePackageVersions implements ClusterMachinePackageVersionInterface
type clusterMachinePackageVersions struct {
	client rest.Interface
}

// newClusterMachinePackageVersions returns a ClusterMachinePackageVersions
func newClusterMachinePackageVersions(c *OpsV1alpha1Client) *clusterMachinePackageVersions {
	return &clusterMachinePackageVersions{
		client: c.RESTClient(),
	}
}

// Get takes name of the clusterMachinePackageVersion, and returns the corresponding clusterMachinePackageVersion object, and an error if there is any.
func (c *clusterMachinePackageVersions) Get(name string, options v1.GetOptions) (result *v1alpha1.ClusterMachinePackageVersion, err error) {
	result = &v1alpha1.ClusterMachinePackageVersion{}
	err = c.client.Get().
		Resource("clustermachinepackageversions").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ClusterMachinePackageVersions that match those selectors.
func (c *clusterMachinePackageVersions) List(opts v1.ListOptions) (result *v1alpha1.ClusterMachinePackageVersionList, err error) {
	result = &v1alpha1.ClusterMachinePackageVersionList{}
	err = c.client.Get().
		Resource("clustermachinepackageversions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested clusterMachinePackageVersions.
func (c *clusterMachinePackageVersions) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("clustermachinepackageversions").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a clusterMachinePackageVersion and creates it.  Returns the server's representation of the clusterMachinePackageVersion, and an error, if there is any.
func (c *clusterMachinePackageVersions) Create(clusterMachinePackageVersion *v1alpha1.ClusterMachinePackageVersion) (result *v1alpha1.ClusterMachinePackageVersion, err error) {
	result = &v1alpha1.ClusterMachinePackageVersion{}
	err = c.client.Post().
		Resource("clustermachinepackageversions").
		Body(clusterMachinePackageVersion).
		Do().
		Into(result)
	return
}

// Update takes the representation of a clusterMachinePackageVersion and updates it. Returns the server's representation of the clusterMachinePackageVersion, and an error, if there is any.
func (c *clusterMachinePackageVersions) Update(clusterMachinePackageVersion *v1alpha1.ClusterMachinePackageVersion) (result *v1alpha1.ClusterMachinePackageVersion, err error) {
	result = &v1alpha1.ClusterMachinePackageVersion{}
	err = c.client.Put().
		Resource("clustermachinepackageversions").
		Name(clusterMachinePackageVersion.Name).
		Body(clusterMachinePackageVersion).
		Do().
		Into(result)
	return
}

// Delete takes name of the clusterMachinePackageVersion and deletes it. Returns an error if one occurs.
func (c *clusterMachinePackageVersions) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("clustermachinepackageversions").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *clusterMachinePackageVersions) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Resource("clustermachinepackageversions").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched clusterMachinePackageVersion.
func (c *clusterMachinePackageVersions) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ClusterMachinePackageVersion, err error) {
	result = &v1alpha1.ClusterMachinePackageVersion{}
	err = c.client.Patch(pt).
		Resource("clustermachinepackageversions").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
