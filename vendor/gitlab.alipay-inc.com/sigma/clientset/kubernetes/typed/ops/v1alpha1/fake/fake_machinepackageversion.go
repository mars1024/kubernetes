/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1alpha1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/ops/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeMachinePackageVersions implements MachinePackageVersionInterface
type FakeMachinePackageVersions struct {
	Fake *FakeOpsV1alpha1
}

var machinepackageversionsResource = schema.GroupVersionResource{Group: "ops.sigma.alipay.com", Version: "v1alpha1", Resource: "machinepackageversions"}

var machinepackageversionsKind = schema.GroupVersionKind{Group: "ops.sigma.alipay.com", Version: "v1alpha1", Kind: "MachinePackageVersion"}

// Get takes name of the machinePackageVersion, and returns the corresponding machinePackageVersion object, and an error if there is any.
func (c *FakeMachinePackageVersions) Get(name string, options v1.GetOptions) (result *v1alpha1.MachinePackageVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(machinepackageversionsResource, name), &v1alpha1.MachinePackageVersion{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MachinePackageVersion), err
}

// List takes label and field selectors, and returns the list of MachinePackageVersions that match those selectors.
func (c *FakeMachinePackageVersions) List(opts v1.ListOptions) (result *v1alpha1.MachinePackageVersionList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(machinepackageversionsResource, machinepackageversionsKind, opts), &v1alpha1.MachinePackageVersionList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.MachinePackageVersionList{ListMeta: obj.(*v1alpha1.MachinePackageVersionList).ListMeta}
	for _, item := range obj.(*v1alpha1.MachinePackageVersionList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested machinePackageVersions.
func (c *FakeMachinePackageVersions) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(machinepackageversionsResource, opts))
}

// Create takes the representation of a machinePackageVersion and creates it.  Returns the server's representation of the machinePackageVersion, and an error, if there is any.
func (c *FakeMachinePackageVersions) Create(machinePackageVersion *v1alpha1.MachinePackageVersion) (result *v1alpha1.MachinePackageVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(machinepackageversionsResource, machinePackageVersion), &v1alpha1.MachinePackageVersion{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MachinePackageVersion), err
}

// Update takes the representation of a machinePackageVersion and updates it. Returns the server's representation of the machinePackageVersion, and an error, if there is any.
func (c *FakeMachinePackageVersions) Update(machinePackageVersion *v1alpha1.MachinePackageVersion) (result *v1alpha1.MachinePackageVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(machinepackageversionsResource, machinePackageVersion), &v1alpha1.MachinePackageVersion{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MachinePackageVersion), err
}

// Delete takes name of the machinePackageVersion and deletes it. Returns an error if one occurs.
func (c *FakeMachinePackageVersions) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(machinepackageversionsResource, name), &v1alpha1.MachinePackageVersion{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeMachinePackageVersions) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(machinepackageversionsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.MachinePackageVersionList{})
	return err
}

// Patch applies the patch and returns the patched machinePackageVersion.
func (c *FakeMachinePackageVersions) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.MachinePackageVersion, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(machinepackageversionsResource, name, data, subresources...), &v1alpha1.MachinePackageVersion{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.MachinePackageVersion), err
}
