/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	scheme "gitlab.alipay-inc.com/sigma/clientset/kubernetes/scheme"
	v1alpha1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/ops/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// MachinePackageBetaPublishesGetter has a method to return a MachinePackageBetaPublishInterface.
// A group's client should implement this interface.
type MachinePackageBetaPublishesGetter interface {
	MachinePackageBetaPublishes() MachinePackageBetaPublishInterface
}

// MachinePackageBetaPublishInterface has methods to work with MachinePackageBetaPublish resources.
type MachinePackageBetaPublishInterface interface {
	Create(*v1alpha1.MachinePackageBetaPublish) (*v1alpha1.MachinePackageBetaPublish, error)
	Update(*v1alpha1.MachinePackageBetaPublish) (*v1alpha1.MachinePackageBetaPublish, error)
	UpdateStatus(*v1alpha1.MachinePackageBetaPublish) (*v1alpha1.MachinePackageBetaPublish, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.MachinePackageBetaPublish, error)
	List(opts v1.ListOptions) (*v1alpha1.MachinePackageBetaPublishList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.MachinePackageBetaPublish, err error)
	MachinePackageBetaPublishExpansion
}

// machinePackageBetaPublishes implements MachinePackageBetaPublishInterface
type machinePackageBetaPublishes struct {
	client rest.Interface
}

// newMachinePackageBetaPublishes returns a MachinePackageBetaPublishes
func newMachinePackageBetaPublishes(c *OpsV1alpha1Client) *machinePackageBetaPublishes {
	return &machinePackageBetaPublishes{
		client: c.RESTClient(),
	}
}

// Get takes name of the machinePackageBetaPublish, and returns the corresponding machinePackageBetaPublish object, and an error if there is any.
func (c *machinePackageBetaPublishes) Get(name string, options v1.GetOptions) (result *v1alpha1.MachinePackageBetaPublish, err error) {
	result = &v1alpha1.MachinePackageBetaPublish{}
	err = c.client.Get().
		Resource("machinepackagebetapublishes").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of MachinePackageBetaPublishes that match those selectors.
func (c *machinePackageBetaPublishes) List(opts v1.ListOptions) (result *v1alpha1.MachinePackageBetaPublishList, err error) {
	result = &v1alpha1.MachinePackageBetaPublishList{}
	err = c.client.Get().
		Resource("machinepackagebetapublishes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested machinePackageBetaPublishes.
func (c *machinePackageBetaPublishes) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("machinepackagebetapublishes").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a machinePackageBetaPublish and creates it.  Returns the server's representation of the machinePackageBetaPublish, and an error, if there is any.
func (c *machinePackageBetaPublishes) Create(machinePackageBetaPublish *v1alpha1.MachinePackageBetaPublish) (result *v1alpha1.MachinePackageBetaPublish, err error) {
	result = &v1alpha1.MachinePackageBetaPublish{}
	err = c.client.Post().
		Resource("machinepackagebetapublishes").
		Body(machinePackageBetaPublish).
		Do().
		Into(result)
	return
}

// Update takes the representation of a machinePackageBetaPublish and updates it. Returns the server's representation of the machinePackageBetaPublish, and an error, if there is any.
func (c *machinePackageBetaPublishes) Update(machinePackageBetaPublish *v1alpha1.MachinePackageBetaPublish) (result *v1alpha1.MachinePackageBetaPublish, err error) {
	result = &v1alpha1.MachinePackageBetaPublish{}
	err = c.client.Put().
		Resource("machinepackagebetapublishes").
		Name(machinePackageBetaPublish.Name).
		Body(machinePackageBetaPublish).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *machinePackageBetaPublishes) UpdateStatus(machinePackageBetaPublish *v1alpha1.MachinePackageBetaPublish) (result *v1alpha1.MachinePackageBetaPublish, err error) {
	result = &v1alpha1.MachinePackageBetaPublish{}
	err = c.client.Put().
		Resource("machinepackagebetapublishes").
		Name(machinePackageBetaPublish.Name).
		SubResource("status").
		Body(machinePackageBetaPublish).
		Do().
		Into(result)
	return
}

// Delete takes name of the machinePackageBetaPublish and deletes it. Returns an error if one occurs.
func (c *machinePackageBetaPublishes) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("machinepackagebetapublishes").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *machinePackageBetaPublishes) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Resource("machinepackagebetapublishes").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched machinePackageBetaPublish.
func (c *machinePackageBetaPublishes) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.MachinePackageBetaPublish, err error) {
	result = &v1alpha1.MachinePackageBetaPublish{}
	err = c.client.Patch(pt).
		Resource("machinepackagebetapublishes").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
