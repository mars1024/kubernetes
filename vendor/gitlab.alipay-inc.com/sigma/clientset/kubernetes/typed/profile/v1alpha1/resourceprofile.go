/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	scheme "gitlab.alipay-inc.com/sigma/clientset/kubernetes/scheme"
	v1alpha1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/profile/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ResourceProfilesGetter has a method to return a ResourceProfileInterface.
// A group's client should implement this interface.
type ResourceProfilesGetter interface {
	ResourceProfiles(namespace string) ResourceProfileInterface
}

// ResourceProfileInterface has methods to work with ResourceProfile resources.
type ResourceProfileInterface interface {
	Create(*v1alpha1.ResourceProfile) (*v1alpha1.ResourceProfile, error)
	Update(*v1alpha1.ResourceProfile) (*v1alpha1.ResourceProfile, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1alpha1.ResourceProfile, error)
	List(opts v1.ListOptions) (*v1alpha1.ResourceProfileList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ResourceProfile, err error)
	ResourceProfileExpansion
}

// resourceProfiles implements ResourceProfileInterface
type resourceProfiles struct {
	client rest.Interface
	ns     string
}

// newResourceProfiles returns a ResourceProfiles
func newResourceProfiles(c *ProfileV1alpha1Client, namespace string) *resourceProfiles {
	return &resourceProfiles{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the resourceProfile, and returns the corresponding resourceProfile object, and an error if there is any.
func (c *resourceProfiles) Get(name string, options v1.GetOptions) (result *v1alpha1.ResourceProfile, err error) {
	result = &v1alpha1.ResourceProfile{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("resourceprofiles").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ResourceProfiles that match those selectors.
func (c *resourceProfiles) List(opts v1.ListOptions) (result *v1alpha1.ResourceProfileList, err error) {
	result = &v1alpha1.ResourceProfileList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("resourceprofiles").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested resourceProfiles.
func (c *resourceProfiles) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("resourceprofiles").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a resourceProfile and creates it.  Returns the server's representation of the resourceProfile, and an error, if there is any.
func (c *resourceProfiles) Create(resourceProfile *v1alpha1.ResourceProfile) (result *v1alpha1.ResourceProfile, err error) {
	result = &v1alpha1.ResourceProfile{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("resourceprofiles").
		Body(resourceProfile).
		Do().
		Into(result)
	return
}

// Update takes the representation of a resourceProfile and updates it. Returns the server's representation of the resourceProfile, and an error, if there is any.
func (c *resourceProfiles) Update(resourceProfile *v1alpha1.ResourceProfile) (result *v1alpha1.ResourceProfile, err error) {
	result = &v1alpha1.ResourceProfile{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("resourceprofiles").
		Name(resourceProfile.Name).
		Body(resourceProfile).
		Do().
		Into(result)
	return
}

// Delete takes name of the resourceProfile and deletes it. Returns an error if one occurs.
func (c *resourceProfiles) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("resourceprofiles").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *resourceProfiles) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("resourceprofiles").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched resourceProfile.
func (c *resourceProfiles) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ResourceProfile, err error) {
	result = &v1alpha1.ResourceProfile{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("resourceprofiles").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
