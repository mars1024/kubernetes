/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1beta1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/promotion/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeNodeSwapClaims implements NodeSwapClaimInterface
type FakeNodeSwapClaims struct {
	Fake *FakePromotionV1beta1
}

var nodeswapclaimsResource = schema.GroupVersionResource{Group: "promotion.sigma.alipay.com", Version: "v1beta1", Resource: "nodeswapclaims"}

var nodeswapclaimsKind = schema.GroupVersionKind{Group: "promotion.sigma.alipay.com", Version: "v1beta1", Kind: "NodeSwapClaim"}

// Get takes name of the nodeSwapClaim, and returns the corresponding nodeSwapClaim object, and an error if there is any.
func (c *FakeNodeSwapClaims) Get(name string, options v1.GetOptions) (result *v1beta1.NodeSwapClaim, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(nodeswapclaimsResource, name), &v1beta1.NodeSwapClaim{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.NodeSwapClaim), err
}

// List takes label and field selectors, and returns the list of NodeSwapClaims that match those selectors.
func (c *FakeNodeSwapClaims) List(opts v1.ListOptions) (result *v1beta1.NodeSwapClaimList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(nodeswapclaimsResource, nodeswapclaimsKind, opts), &v1beta1.NodeSwapClaimList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1beta1.NodeSwapClaimList{ListMeta: obj.(*v1beta1.NodeSwapClaimList).ListMeta}
	for _, item := range obj.(*v1beta1.NodeSwapClaimList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested nodeSwapClaims.
func (c *FakeNodeSwapClaims) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(nodeswapclaimsResource, opts))
}

// Create takes the representation of a nodeSwapClaim and creates it.  Returns the server's representation of the nodeSwapClaim, and an error, if there is any.
func (c *FakeNodeSwapClaims) Create(nodeSwapClaim *v1beta1.NodeSwapClaim) (result *v1beta1.NodeSwapClaim, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(nodeswapclaimsResource, nodeSwapClaim), &v1beta1.NodeSwapClaim{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.NodeSwapClaim), err
}

// Update takes the representation of a nodeSwapClaim and updates it. Returns the server's representation of the nodeSwapClaim, and an error, if there is any.
func (c *FakeNodeSwapClaims) Update(nodeSwapClaim *v1beta1.NodeSwapClaim) (result *v1beta1.NodeSwapClaim, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(nodeswapclaimsResource, nodeSwapClaim), &v1beta1.NodeSwapClaim{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.NodeSwapClaim), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeNodeSwapClaims) UpdateStatus(nodeSwapClaim *v1beta1.NodeSwapClaim) (*v1beta1.NodeSwapClaim, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(nodeswapclaimsResource, "status", nodeSwapClaim), &v1beta1.NodeSwapClaim{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.NodeSwapClaim), err
}

// Delete takes name of the nodeSwapClaim and deletes it. Returns an error if one occurs.
func (c *FakeNodeSwapClaims) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(nodeswapclaimsResource, name), &v1beta1.NodeSwapClaim{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeNodeSwapClaims) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(nodeswapclaimsResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1beta1.NodeSwapClaimList{})
	return err
}

// Patch applies the patch and returns the patched nodeSwapClaim.
func (c *FakeNodeSwapClaims) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.NodeSwapClaim, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(nodeswapclaimsResource, name, data, subresources...), &v1beta1.NodeSwapClaim{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1beta1.NodeSwapClaim), err
}
