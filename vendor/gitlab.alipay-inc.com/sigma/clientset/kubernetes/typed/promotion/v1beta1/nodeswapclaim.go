/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1beta1

import (
	scheme "gitlab.alipay-inc.com/sigma/clientset/kubernetes/scheme"
	v1beta1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/promotion/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// NodeSwapClaimsGetter has a method to return a NodeSwapClaimInterface.
// A group's client should implement this interface.
type NodeSwapClaimsGetter interface {
	NodeSwapClaims() NodeSwapClaimInterface
}

// NodeSwapClaimInterface has methods to work with NodeSwapClaim resources.
type NodeSwapClaimInterface interface {
	Create(*v1beta1.NodeSwapClaim) (*v1beta1.NodeSwapClaim, error)
	Update(*v1beta1.NodeSwapClaim) (*v1beta1.NodeSwapClaim, error)
	UpdateStatus(*v1beta1.NodeSwapClaim) (*v1beta1.NodeSwapClaim, error)
	Delete(name string, options *v1.DeleteOptions) error
	DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(name string, options v1.GetOptions) (*v1beta1.NodeSwapClaim, error)
	List(opts v1.ListOptions) (*v1beta1.NodeSwapClaimList, error)
	Watch(opts v1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.NodeSwapClaim, err error)
	NodeSwapClaimExpansion
}

// nodeSwapClaims implements NodeSwapClaimInterface
type nodeSwapClaims struct {
	client rest.Interface
}

// newNodeSwapClaims returns a NodeSwapClaims
func newNodeSwapClaims(c *PromotionV1beta1Client) *nodeSwapClaims {
	return &nodeSwapClaims{
		client: c.RESTClient(),
	}
}

// Get takes name of the nodeSwapClaim, and returns the corresponding nodeSwapClaim object, and an error if there is any.
func (c *nodeSwapClaims) Get(name string, options v1.GetOptions) (result *v1beta1.NodeSwapClaim, err error) {
	result = &v1beta1.NodeSwapClaim{}
	err = c.client.Get().
		Resource("nodeswapclaims").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of NodeSwapClaims that match those selectors.
func (c *nodeSwapClaims) List(opts v1.ListOptions) (result *v1beta1.NodeSwapClaimList, err error) {
	result = &v1beta1.NodeSwapClaimList{}
	err = c.client.Get().
		Resource("nodeswapclaims").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested nodeSwapClaims.
func (c *nodeSwapClaims) Watch(opts v1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Resource("nodeswapclaims").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a nodeSwapClaim and creates it.  Returns the server's representation of the nodeSwapClaim, and an error, if there is any.
func (c *nodeSwapClaims) Create(nodeSwapClaim *v1beta1.NodeSwapClaim) (result *v1beta1.NodeSwapClaim, err error) {
	result = &v1beta1.NodeSwapClaim{}
	err = c.client.Post().
		Resource("nodeswapclaims").
		Body(nodeSwapClaim).
		Do().
		Into(result)
	return
}

// Update takes the representation of a nodeSwapClaim and updates it. Returns the server's representation of the nodeSwapClaim, and an error, if there is any.
func (c *nodeSwapClaims) Update(nodeSwapClaim *v1beta1.NodeSwapClaim) (result *v1beta1.NodeSwapClaim, err error) {
	result = &v1beta1.NodeSwapClaim{}
	err = c.client.Put().
		Resource("nodeswapclaims").
		Name(nodeSwapClaim.Name).
		Body(nodeSwapClaim).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *nodeSwapClaims) UpdateStatus(nodeSwapClaim *v1beta1.NodeSwapClaim) (result *v1beta1.NodeSwapClaim, err error) {
	result = &v1beta1.NodeSwapClaim{}
	err = c.client.Put().
		Resource("nodeswapclaims").
		Name(nodeSwapClaim.Name).
		SubResource("status").
		Body(nodeSwapClaim).
		Do().
		Into(result)
	return
}

// Delete takes name of the nodeSwapClaim and deletes it. Returns an error if one occurs.
func (c *nodeSwapClaims) Delete(name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("nodeswapclaims").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *nodeSwapClaims) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	return c.client.Delete().
		Resource("nodeswapclaims").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched nodeSwapClaim.
func (c *nodeSwapClaims) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1beta1.NodeSwapClaim, err error) {
	result = &v1beta1.NodeSwapClaim{}
	err = c.client.Patch(pt).
		Resource("nodeswapclaims").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
