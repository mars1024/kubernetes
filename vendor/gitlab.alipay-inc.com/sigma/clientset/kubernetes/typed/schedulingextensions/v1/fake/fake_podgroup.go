/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	schedulingextensionsv1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/schedulingextensions/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakePodGroups implements PodGroupInterface
type FakePodGroups struct {
	Fake *FakeSchedulingextensionsV1
	ns   string
}

var podgroupsResource = schema.GroupVersionResource{Group: "schedulingextensions.sigma.alipay.com", Version: "v1", Resource: "podgroups"}

var podgroupsKind = schema.GroupVersionKind{Group: "schedulingextensions.sigma.alipay.com", Version: "v1", Kind: "PodGroup"}

// Get takes name of the podGroup, and returns the corresponding podGroup object, and an error if there is any.
func (c *FakePodGroups) Get(name string, options v1.GetOptions) (result *schedulingextensionsv1.PodGroup, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(podgroupsResource, c.ns, name), &schedulingextensionsv1.PodGroup{})

	if obj == nil {
		return nil, err
	}
	return obj.(*schedulingextensionsv1.PodGroup), err
}

// List takes label and field selectors, and returns the list of PodGroups that match those selectors.
func (c *FakePodGroups) List(opts v1.ListOptions) (result *schedulingextensionsv1.PodGroupList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(podgroupsResource, podgroupsKind, c.ns, opts), &schedulingextensionsv1.PodGroupList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &schedulingextensionsv1.PodGroupList{ListMeta: obj.(*schedulingextensionsv1.PodGroupList).ListMeta}
	for _, item := range obj.(*schedulingextensionsv1.PodGroupList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested podGroups.
func (c *FakePodGroups) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(podgroupsResource, c.ns, opts))

}

// Create takes the representation of a podGroup and creates it.  Returns the server's representation of the podGroup, and an error, if there is any.
func (c *FakePodGroups) Create(podGroup *schedulingextensionsv1.PodGroup) (result *schedulingextensionsv1.PodGroup, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(podgroupsResource, c.ns, podGroup), &schedulingextensionsv1.PodGroup{})

	if obj == nil {
		return nil, err
	}
	return obj.(*schedulingextensionsv1.PodGroup), err
}

// Update takes the representation of a podGroup and updates it. Returns the server's representation of the podGroup, and an error, if there is any.
func (c *FakePodGroups) Update(podGroup *schedulingextensionsv1.PodGroup) (result *schedulingextensionsv1.PodGroup, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(podgroupsResource, c.ns, podGroup), &schedulingextensionsv1.PodGroup{})

	if obj == nil {
		return nil, err
	}
	return obj.(*schedulingextensionsv1.PodGroup), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakePodGroups) UpdateStatus(podGroup *schedulingextensionsv1.PodGroup) (*schedulingextensionsv1.PodGroup, error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateSubresourceAction(podgroupsResource, "status", c.ns, podGroup), &schedulingextensionsv1.PodGroup{})

	if obj == nil {
		return nil, err
	}
	return obj.(*schedulingextensionsv1.PodGroup), err
}

// Delete takes name of the podGroup and deletes it. Returns an error if one occurs.
func (c *FakePodGroups) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(podgroupsResource, c.ns, name), &schedulingextensionsv1.PodGroup{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePodGroups) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(podgroupsResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &schedulingextensionsv1.PodGroupList{})
	return err
}

// Patch applies the patch and returns the patched podGroup.
func (c *FakePodGroups) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *schedulingextensionsv1.PodGroup, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(podgroupsResource, c.ns, name, data, subresources...), &schedulingextensionsv1.PodGroup{})

	if obj == nil {
		return nil, err
	}
	return obj.(*schedulingextensionsv1.PodGroup), err
}
