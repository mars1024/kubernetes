/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	scheme "gitlab.alipay-inc.com/sigma/clientset/kubernetes/scheme"
	v1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/schedulingextensions/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// PodGroupsGetter has a method to return a PodGroupInterface.
// A group's client should implement this interface.
type PodGroupsGetter interface {
	PodGroups(namespace string) PodGroupInterface
}

// PodGroupInterface has methods to work with PodGroup resources.
type PodGroupInterface interface {
	Create(*v1.PodGroup) (*v1.PodGroup, error)
	Update(*v1.PodGroup) (*v1.PodGroup, error)
	UpdateStatus(*v1.PodGroup) (*v1.PodGroup, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.PodGroup, error)
	List(opts metav1.ListOptions) (*v1.PodGroupList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.PodGroup, err error)
	PodGroupExpansion
}

// podGroups implements PodGroupInterface
type podGroups struct {
	client rest.Interface
	ns     string
}

// newPodGroups returns a PodGroups
func newPodGroups(c *SchedulingextensionsV1Client, namespace string) *podGroups {
	return &podGroups{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the podGroup, and returns the corresponding podGroup object, and an error if there is any.
func (c *podGroups) Get(name string, options metav1.GetOptions) (result *v1.PodGroup, err error) {
	result = &v1.PodGroup{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("podgroups").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of PodGroups that match those selectors.
func (c *podGroups) List(opts metav1.ListOptions) (result *v1.PodGroupList, err error) {
	result = &v1.PodGroupList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("podgroups").
		VersionedParams(&opts, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested podGroups.
func (c *podGroups) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("podgroups").
		VersionedParams(&opts, scheme.ParameterCodec).
		Watch()
}

// Create takes the representation of a podGroup and creates it.  Returns the server's representation of the podGroup, and an error, if there is any.
func (c *podGroups) Create(podGroup *v1.PodGroup) (result *v1.PodGroup, err error) {
	result = &v1.PodGroup{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("podgroups").
		Body(podGroup).
		Do().
		Into(result)
	return
}

// Update takes the representation of a podGroup and updates it. Returns the server's representation of the podGroup, and an error, if there is any.
func (c *podGroups) Update(podGroup *v1.PodGroup) (result *v1.PodGroup, err error) {
	result = &v1.PodGroup{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("podgroups").
		Name(podGroup.Name).
		Body(podGroup).
		Do().
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *podGroups) UpdateStatus(podGroup *v1.PodGroup) (result *v1.PodGroup, err error) {
	result = &v1.PodGroup{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("podgroups").
		Name(podGroup.Name).
		SubResource("status").
		Body(podGroup).
		Do().
		Into(result)
	return
}

// Delete takes name of the podGroup and deletes it. Returns an error if one occurs.
func (c *podGroups) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("podgroups").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *podGroups) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("podgroups").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched podGroup.
func (c *podGroups) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.PodGroup, err error) {
	result = &v1.PodGroup{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("podgroups").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
