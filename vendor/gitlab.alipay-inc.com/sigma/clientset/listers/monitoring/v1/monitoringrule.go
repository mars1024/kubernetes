/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/monitoring/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MonitoringRuleLister helps list MonitoringRules.
type MonitoringRuleLister interface {
	// List lists all MonitoringRules in the indexer.
	List(selector labels.Selector) (ret []*v1.MonitoringRule, err error)
	// Get retrieves the MonitoringRule from the index for a given name.
	Get(name string) (*v1.MonitoringRule, error)
	MonitoringRuleListerExpansion
}

// monitoringRuleLister implements the MonitoringRuleLister interface.
type monitoringRuleLister struct {
	indexer cache.Indexer
}

// NewMonitoringRuleLister returns a new MonitoringRuleLister.
func NewMonitoringRuleLister(indexer cache.Indexer) MonitoringRuleLister {
	return &monitoringRuleLister{indexer: indexer}
}

// List lists all MonitoringRules in the indexer.
func (s *monitoringRuleLister) List(selector labels.Selector) (ret []*v1.MonitoringRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MonitoringRule))
	})
	return ret, err
}

// Get retrieves the MonitoringRule from the index for a given name.
func (s *monitoringRuleLister) Get(name string) (*v1.MonitoringRule, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("monitoringrule"), name)
	}
	return obj.(*v1.MonitoringRule), nil
}
