/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/monitoring/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// NotificationChannelLister helps list NotificationChannels.
type NotificationChannelLister interface {
	// List lists all NotificationChannels in the indexer.
	List(selector labels.Selector) (ret []*v1.NotificationChannel, err error)
	// Get retrieves the NotificationChannel from the index for a given name.
	Get(name string) (*v1.NotificationChannel, error)
	NotificationChannelListerExpansion
}

// notificationChannelLister implements the NotificationChannelLister interface.
type notificationChannelLister struct {
	indexer cache.Indexer
}

// NewNotificationChannelLister returns a new NotificationChannelLister.
func NewNotificationChannelLister(indexer cache.Indexer) NotificationChannelLister {
	return &notificationChannelLister{indexer: indexer}
}

// List lists all NotificationChannels in the indexer.
func (s *notificationChannelLister) List(selector labels.Selector) (ret []*v1.NotificationChannel, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.NotificationChannel))
	})
	return ret, err
}

// Get retrieves the NotificationChannel from the index for a given name.
func (s *notificationChannelLister) Get(name string) (*v1.NotificationChannel, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("notificationchannel"), name)
	}
	return obj.(*v1.NotificationChannel), nil
}
