/*
Copyright 2019 The Alipay Authors.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "gitlab.alipay-inc.com/sigma/clientset/pkg/apis/monitoring/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ScrapeConfigLister helps list ScrapeConfigs.
type ScrapeConfigLister interface {
	// List lists all ScrapeConfigs in the indexer.
	List(selector labels.Selector) (ret []*v1.ScrapeConfig, err error)
	// ScrapeConfigs returns an object that can list and get ScrapeConfigs.
	ScrapeConfigs(namespace string) ScrapeConfigNamespaceLister
	ScrapeConfigListerExpansion
}

// scrapeConfigLister implements the ScrapeConfigLister interface.
type scrapeConfigLister struct {
	indexer cache.Indexer
}

// NewScrapeConfigLister returns a new ScrapeConfigLister.
func NewScrapeConfigLister(indexer cache.Indexer) ScrapeConfigLister {
	return &scrapeConfigLister{indexer: indexer}
}

// List lists all ScrapeConfigs in the indexer.
func (s *scrapeConfigLister) List(selector labels.Selector) (ret []*v1.ScrapeConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ScrapeConfig))
	})
	return ret, err
}

// ScrapeConfigs returns an object that can list and get ScrapeConfigs.
func (s *scrapeConfigLister) ScrapeConfigs(namespace string) ScrapeConfigNamespaceLister {
	return scrapeConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScrapeConfigNamespaceLister helps list and get ScrapeConfigs.
type ScrapeConfigNamespaceLister interface {
	// List lists all ScrapeConfigs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.ScrapeConfig, err error)
	// Get retrieves the ScrapeConfig from the indexer for a given namespace and name.
	Get(name string) (*v1.ScrapeConfig, error)
	ScrapeConfigNamespaceListerExpansion
}

// scrapeConfigNamespaceLister implements the ScrapeConfigNamespaceLister
// interface.
type scrapeConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScrapeConfigs in the indexer for a given namespace.
func (s scrapeConfigNamespaceLister) List(selector labels.Selector) (ret []*v1.ScrapeConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ScrapeConfig))
	})
	return ret, err
}

// Get retrieves the ScrapeConfig from the indexer for a given namespace and name.
func (s scrapeConfigNamespaceLister) Get(name string) (*v1.ScrapeConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("scrapeconfig"), name)
	}
	return obj.(*v1.ScrapeConfig), nil
}
